# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/
/coverage/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release











firebase_options.dart
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyA7jlX_7umiuqrJZhFmyMzpOWtxOdusCKM',
    appId: '1:833225352309:web:7b9fd30f0205268972c43c',
    messagingSenderId: '833225352309',
    projectId: 'titweng-cattle-recognition',
    authDomain: 'titweng-cattle-recognition.firebaseapp.com',
    storageBucket: 'titweng-cattle-recognition.firebasestorage.app',
    measurementId: 'G-7EXEB12DLC',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyD2TofIt6mjF_XMHTx1EIB9QHdoE-sGiqM',
    appId: '1:833225352309:android:92920114ff3bd50772c43c',
    messagingSenderId: '833225352309',
    projectId: 'titweng-cattle-recognition',
    storageBucket: 'titweng-cattle-recognition.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyBBJqL9HiM99uaa-e0zIDDTj5XLIoAkAEA',
    appId: '1:833225352309:ios:3935c2130735a22972c43c',
    messagingSenderId: '833225352309',
    projectId: 'titweng-cattle-recognition',
    storageBucket: 'titweng-cattle-recognition.firebasestorage.app',
    iosBundleId: 'titweng-cattle-recognition',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyBBJqL9HiM99uaa-e0zIDDTj5XLIoAkAEA',
    appId: '1:833225352309:ios:3935c2130735a22972c43c',
    messagingSenderId: '833225352309',
    projectId: 'titweng-cattle-recognition',
    storageBucket: 'titweng-cattle-recognition.firebasestorage.app',
    iosBundleId: 'titweng-cattle-recognition',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyA7jlX_7umiuqrJZhFmyMzpOWtxOdusCKM',
    appId: '1:833225352309:web:7b9fd30f0205268972c43c',
    messagingSenderId: '833225352309',
    projectId: 'titweng-cattle-recognition',
    authDomain: 'titweng-cattle-recognition.firebaseapp.com',
    storageBucket: 'titweng-cattle-recognition.firebasestorage.app',
    measurementId: 'G-7EXEB12DLC',
  );
}

